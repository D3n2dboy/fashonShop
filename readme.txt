###########################
###   npm install       ###   Установка пакетов
###########################

npm i -D webp-converter@2.2.3 --save-dev



###########################
###   npm run dev       ###   Режим разработки 
###   npm run build     ###   Режим режим сборки проекта
###   npm run zip       ###   Режим режим сборки проекта и создание архива 
###   npm run deploy    ###   Режим режим сборки проекта и загрузка по ФТП  
###   npm run devbuild  ###   Режим режим сборки проекта без webp (не будет обертки и создания webp) 
###   npm runsvgSprive  ###   Создать SVG спрайты npm run 
###########################

##########################
НЕ ДОБАВЛЕНО в основоной шаблон

package.json
"homepage": "https://d3n2dboy.github.io/fashonShop",  ///  указать репозиторий для выгрузки gh pages
"scripts": {
    "devn": "gulp --nowebp",  // разработка без web-p изображений
    "deploypages": "gh-pages -d dist",  // не забыть установить модуль  npm i gh-pages -D // запустить выгрузку на ghpages  npm run deploypages
 }
 #############################


###########################
###         GIT         ###   Установка и настройка GIT 
###########################

git config --global user.name "Ryazanov Denis"      Задать имя пользователя (без флага --global будет для текущего проекта)
git config --global user.email d3n2dboy@gmail.com   Задаь email  (без флага --global будет для текущего проекта)


###########################
###   git init          ###   Инициализировать гит в проекте
###   git status        ###   Посмотреть какие файлы  которые не отслеживатся гитом
###   git add .         ###   Добавить все файлы к отслеживанию
###   git add ex.txt    ###   Добавить фаил "ex.txt" к отслеживанию


###########################
###      GIT HUB        ###   Работа с гит хаб (создаем через сайт репозиторий инструкция на github)
###########################
### git remote add origin https://github.com/D3n2dboy/fashonShop.git ###  Скопировать с инструкции
### git branch -M main  ###  Установка главной ветки (main можно заменить на сое название)
### git commit -m "initial commit"  ###  установить commits
### git push origin main  ###  Установить оригинальной ветку main
### git push -u origin main ###   Загрузить файлы в удаленный репозиторий
###########################  Все установлено
###########################  После изменения файлов 
### git add .           ###  Добавить к отслеживанию
### git commit -m "Update index.html"  ### Создаем коммит
### git push            ###  Загрузить изменения на github
### git stash           ###  Сохоранить в кеш (на локалке) изменения чтобы поработать с другими комитами
### git stash pop       ###  Вернуть из кеша свои данные
### git reset --hard    ###  Удалить все незакомиченые данные

tig - прога для просмотра комитов из консоли

###########################

### git log             ###  Посмотреть коммиты

### .gitkeep            ###  Если нужна пустая папка на удаленке (добавить в нее фаил ".gitkeep" и она выгрузится пустой)

### git checkout -b devverstka  ###  создание новой ветки с названием "devverstka" (сразу будем находиться в ней)

### git push --set-upstream origin devverstka  ### устанавиливает дефолтной ветку для текущей локальной ветки (только при первом пуше)
### git checkout main  ###  Перейти в ветку main
### git merge devverstka ###  Загрузить изменения в ветку мастер из ветки devverstka


### git branch -D devverstka ###  Удалит ветку devverstka локально на ПК
### git push --delete origin devverstka ### Удалит devverstka  ### удалит на гитхабе



### Ошибки GIT ###
Git может справиться с этим, автоматически преобразуя окончания строк CRLF в LF, когда вы добавляете файл в индекс,
и наоборот, когда он извлекает код в вашу файловую систему. Вы можете включить эту функцию с помощью настройки core.autocrlf.
Если вы работаете на компьютере с Windows, установите для него значение true — это преобразует окончания LF в CRLF при извлечении кода:
$ git config --global core.autocrlf true

Если вы используете систему Linux или Mac, в которой используются окончания строк LF, вы не хотите, чтобы Git автоматически
преобразовывал их при извлечении файлов; однако, если случайно появится файл с окончаниями CRLF, вы можете захотеть, чтобы
Git исправил его. Вы можете указать Git преобразовать CRLF в LF при фиксации, но не наоборот, установив core.autocrlf для ввода:
$ git config --global core.autocrlf input


###########################
###   Состояния файлов  ###
###########################
###   untracked         ###  не отслеживается
###   modified          ###  измененный фаил
###########################